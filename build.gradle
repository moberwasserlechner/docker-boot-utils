plugins {
	id 'java'
	id 'maven-publish'
	id "com.jfrog.bintray" version "1.8.4"
}

group 'com.byteowls'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot:2.2.4.RELEASE"

	testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
	testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
	testRuntimeOnly "ch.qos.logback:logback-classic:1.2.3"

	testImplementation "org.mockito:mockito-core:3.2.0"
}

java {
	withJavadocJar()
	withSourcesJar()
}

// ###################################
// ### Publish to local maven repo ###
// ###################################

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
}

// ##########################
// ### Publish to bintray ###
// ##########################

bintray {
	user = project.hasProperty('BINTRAY_USER') ? BINTRAY_USER : null //this usually comes from gradle.properties file in ~/.gradle
	key = project.hasProperty('BINTRAY_API_KEY') ? BINTRAY_API_KEY : null //this usually comes from gradle.properties file in ~/.gradle

	// configurations = ['archives'] //When uploading configuration files
	// - OR -
	publications = ['mavenJava'] //When uploading Maven-based publication files

	dryRun = false //Whether to run this as dry-run, without deploying
	publish = false //If version should be auto published after an upload

	// Package configuration. The plugin will use the repo and name properties to check if the package already exists.
	// In that case, there's no need to configure the other package properties (like userOrg, desc, etc).
	pkg {
		repo = 'maven'
		name = 'docker-boot-utils'
		desc = 'Spring Boot utils for Docker easier integration'
		websiteUrl = 'https://github.com/moberwasserlechner/docker-boot-utils'
		issueTrackerUrl = 'https://github.com/moberwasserlechner/docker-boot-utils/issues'
		vcsUrl = 'https://github.com/moberwasserlechner/docker-boot-utils.git'
		licenses = ['MIT']
		labels = ['docker', 'docker-secrets', 'spring-boot']
		publicDownloadNumbers = true

		version {
			name = project.version //Bintray logical version name
			// desc = 'optional'
			vcsTag = project.version
		}
	}
}


javadoc {
	if (JavaVersion.current().isJava9Compatible()) {
		options.addBooleanOption('html5', true)
	}
}

test {
	useJUnitPlatform {
		excludeTags 'integration'
	}
}
